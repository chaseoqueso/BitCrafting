package com.chaseoqueso.bitcrafting.container;

import com.chaseoqueso.bitcrafting.slots.BitSlot;
import com.chaseoqueso.bitcrafting.slots.ForgeSlot;
import com.chaseoqueso.bitcrafting.tileentity.TileEntityBitChest;
import com.chaseoqueso.bitcrafting.tileentity.TileEntityBitForge;

import net.minecraft.entity.player.EntityPlayer;
import net.minecraft.entity.player.InventoryPlayer;
import net.minecraft.inventory.Container;
import net.minecraft.inventory.IInventory;
import net.minecraft.inventory.Slot;
import net.minecraft.item.ItemStack;
import net.minecraft.world.World;

public class ContainerBitChest extends Container {

	public TileEntityBitChest tileChest;
	private int numRows;
	private World world;

	public ContainerBitChest(InventoryPlayer player, TileEntityBitChest tileentity) {
		this.tileChest = tileentity;
		tileentity.openInventory();
		world = player.player.worldObj;

		int xAmount = 16, yAmount = 16, xStart = 0, yStart = -37;
		for (int y = 0; y < yAmount; y++) {
			for (int x = 0; x < xAmount; x++) {
				this.addSlotToContainer(new BitSlot(tileentity, x + y * 16, xStart + x * 10, yStart + y * 10));
			}
		}

		int i;
		for (i = 0; i < 3; i++) {
			for (int j = 0; j < 9; j++) {
				this.addSlotToContainer(new Slot(player, j + i * 9 + 9, 8 + j * 18, 128 + i * 18));
			}
		}

		for (i = 0; i < 9; i++) {
			this.addSlotToContainer(new Slot(player, i, 8 + i * 18, 184));
		}
	}

	public boolean canInteractWith(EntityPlayer player) {
		return this.tileChest.isUseableByPlayer(player);
	}

	/**
	 * Called when a player shift-clicks on a slot. You must override this or you
	 * will crash when someone does that.
	 */
	@Override
	public ItemStack transferStackInSlot(EntityPlayer player, int par2) {
		ItemStack itemstack = null;
		Slot slot = (Slot) this.inventorySlots.get(par2);

		if (slot != null && slot.getHasStack()) {
			ItemStack itemstack1 = slot.getStack();
			itemstack = itemstack1.copy();

			if (par2 < 256) {
				if (!this.mergeItemStack(itemstack1, 256, 292, false))
					return null;
				slot.onSlotChange(itemstack1, itemstack);
			} else if (par2 >= 256 && par2 < 283 && (!this.mergeItemStack(itemstack1, 283, 292, false))) {
				return null;
			} else if (par2 >= 283 && par2 < 292 && (!this.mergeItemStack(itemstack1, 256, 283, false))) {
				return null;
			}
			if (itemstack1.stackSize == 0) {
				slot.putStack((ItemStack) null);
			} else {
				slot.onSlotChanged();
			}
			if (itemstack1.stackSize == itemstack.stackSize)
				return null;
			slot.onPickupFromSlot(player, itemstack1);
		}
		return itemstack;
	}

    /**
     * Called when the container is closed.
     */
    public void onContainerClosed(EntityPlayer p_75134_1_)
    {
        super.onContainerClosed(p_75134_1_);
        this.tileChest.closeInventory();
    }
}
