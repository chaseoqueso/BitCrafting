package com.chaseoqueso.bitcrafting.container;

import com.chaseoqueso.bitcrafting.items.ItemBit;
import com.chaseoqueso.bitcrafting.slots.FusionSlot;
import com.chaseoqueso.bitcrafting.tileentity.TileEntityBitFusionTable;

import net.minecraft.entity.player.EntityPlayer;
import net.minecraft.entity.player.InventoryPlayer;
import net.minecraft.inventory.Container;
import net.minecraft.inventory.IInventory;
import net.minecraft.inventory.InventoryCraftResult;
import net.minecraft.inventory.Slot;
import net.minecraft.inventory.SlotCrafting;
import net.minecraft.item.ItemStack;
import net.minecraft.nbt.NBTTagCompound;

public class ContainerBitFusionTable extends Container {
	
	private TileEntityBitFusionTable tileFusionTable;
	private InventoryPlayer player;
    public IInventory craftResult = new InventoryCraftResult();
    public int xpCost = 0;
	
	public ContainerBitFusionTable(InventoryPlayer player, TileEntityBitFusionTable tileentity)
	{
		this.tileFusionTable = tileentity;
		this.player = player;
		this.tileFusionTable.setEventHandler(this);
		
		this.addSlotToContainer(new Slot(tileentity, 0, 25, 34));

		int i;
		for(i = 0; i < 3; i++)
			for(int j = 0; j < 3; j++)
				this.addSlotToContainer(new Slot(tileentity, 1 + i*3 + j, 62 + j*18, 16 + i*18));

		this.addSlotToContainer(new FusionSlot(player.player, tileentity, craftResult, 0, 144, 34));
		
		for(i = 0; i < 3; i++)
		{
			for(int j = 0; j < 9; j++)
			{
				this.addSlotToContainer(new Slot(player, j + i*9 + 9, 8 + j * 18, 90 + i*18));
			}
		}
		
		for(i = 0; i < 9; i++)
		{
			this.addSlotToContainer(new Slot(player, i, 8 + i*18, 148));
		}
		
        this.onCraftMatrixChanged(this.tileFusionTable);
	}
	
	@Override
	public void onCraftMatrixChanged(IInventory p_75130_1_)
    {
		boolean canFuse = false;
		
		for(int i = 1; i < 10; i++)
			if(tileFusionTable.getStackInSlot(i) != null)
				if(tileFusionTable.getStackInSlot(i).getItem() instanceof ItemBit)
					canFuse = true;
				else
				{
					canFuse = false;
					break;
				}
		
		if(tileFusionTable.getStackInSlot(0) == null)
			canFuse = false;

		if(!canFuse)
		{
			this.craftResult.setInventorySlotContents(0, null);
			xpCost = 0;
			return;
		}

		ItemStack stack = tileFusionTable.getStackInSlot(0).copy();
		
		if(stack.getItem() instanceof ItemBit)
		{
			NBTTagCompound tagCompound = stack.getTagCompound();
			stack.stackSize = 1;
			
			float damage = 0, durability = 0, enchantability = 0;
			ItemStack tempstack;
			for(int i = 9; i >= 0; i--)
			{
				tempstack = tileFusionTable.getStackInSlot(i);
				if(tempstack != null)
				{
					if(!tempstack.hasTagCompound())
						break;
					tagCompound = tempstack.getTagCompound();
					damage += tagCompound.getFloat("damage");
					durability += tagCompound.getFloat("durability");
					enchantability += tagCompound.getFloat("enchantability");
				}
			}
			
			xpCost = this.xpCost(damage, durability, enchantability);
			if()
				this.craftResult.setInventorySlotContents(0, ItemBit.setBit(stack, tagCompound.getString("color"), tagCompound.getString("shade"), damage, durability, enchantability).copy());
		} else {
			NBTTagCompound tagCompound = stack.getTagCompound();
			int uses = tagCompound.getInteger("Uses");
			
			ItemStack tempstack;
			for(int i = 9; i > 0; i--)
			{
				tempstack = tileFusionTable.getStackInSlot(i);
				if(tempstack != null)
				{
					if(!tempstack.hasTagCompound())
						continue;
					if(uses > 0)
						uses -= Math.min(Math.max((int)tempstack.getTagCompound().getFloat("durability"), 1), uses);
					else
						break;
				}
			}
			
			xpCost = Math.max((tagCompound.getInteger("Uses") - uses)/100, 1);
			
			tagCompound.setInteger("Uses", uses);
			this.craftResult.setInventorySlotContents(0, stack);
		}
	}
	
	private int xpCost(float damage, float durability, float enchantability)
	{
		return (int)(1.5 + damage*4 + durability*.06 + enchantability*1.5);
	}
	
	@Override
	public void onContainerClosed(EntityPlayer p_75134_1_)
    {
		InventoryPlayer inventoryplayer = p_75134_1_.inventory;
	
	    if (inventoryplayer.getItemStack() != null)
	    {
	        p_75134_1_.dropPlayerItemWithRandomChoice(inventoryplayer.getItemStack(), false);
	        inventoryplayer.setItemStack((ItemStack)null);
	    }
    }

	public boolean canInteractWith(EntityPlayer player) {
		return this.tileFusionTable.isUseableByPlayer(player);
	}
	
	@Override
	public ItemStack transferStackInSlot(EntityPlayer player, int par2)
	{
		ItemStack itemstack = null;
		Slot slot = (Slot) this.inventorySlots.get(par2);
		if(slot != null && slot.getHasStack())
		{
			ItemStack itemstack1 = slot.getStack();
			itemstack = itemstack1.copy();

			if(par2 < 11)
			{
				if(!this.mergeItemStack(itemstack1, 11, 47, false))
					return null;
				slot.onSlotChange(itemstack1, itemstack);
			} else if(par2 >= 11 && par2 < 38 && !this.mergeItemStack(itemstack1, 38, 47, false)) {
				return null;
			} else if(par2 >= 38 && par2 < 47 && !this.mergeItemStack(itemstack1, 11, 38, false)) {
				return null;
			} 
			if(itemstack1.stackSize == 0)
			{
				slot.putStack((ItemStack) null);
			} else {
				slot.onSlotChanged();
			}
			if(itemstack1.stackSize == itemstack.stackSize)
				return null;
			slot.onPickupFromSlot(player, itemstack1);
		}
		return itemstack;
	}
}
