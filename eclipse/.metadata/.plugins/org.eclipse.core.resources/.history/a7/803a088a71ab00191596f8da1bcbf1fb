package com.chaseoqueso.bitcrafting.items;

import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.Random;

import javax.imageio.ImageIO;

import com.chaseoqueso.bitcrafting.BitCraftingMod;
import com.google.common.collect.HashMultimap;
import com.google.common.collect.Multimap;

import cpw.mods.fml.common.SidedProxy;
import cpw.mods.fml.relauncher.Side;
import cpw.mods.fml.relauncher.SideOnly;
import net.minecraft.block.Block;
import net.minecraft.block.material.Material;
import net.minecraft.creativetab.CreativeTabs;
import net.minecraft.entity.EntityLivingBase;
import net.minecraft.entity.SharedMonsterAttributes;
import net.minecraft.entity.ai.attributes.AttributeModifier;
import net.minecraft.entity.player.EntityPlayer;
import net.minecraft.init.Blocks;
import net.minecraft.init.Items;
import net.minecraft.item.EnumAction;
import net.minecraft.item.Item;
import net.minecraft.item.ItemStack;
import net.minecraft.item.ItemSword;
import net.minecraft.nbt.NBTTagCompound;
import net.minecraft.nbt.NBTTagList;
import net.minecraft.util.EnumChatFormatting;
import net.minecraft.util.IIcon;
import net.minecraft.util.ResourceLocation;
import net.minecraft.world.World;
import net.minecraftforge.common.util.EnumHelper;
import net.minecraft.client.Minecraft;
import net.minecraft.client.renderer.texture.DynamicTexture;
import net.minecraft.client.renderer.texture.IIconRegister;
import net.minecraft.client.renderer.texture.TextureAtlasSprite;
import net.minecraft.client.renderer.texture.TextureMap;
import net.minecraft.client.renderer.texture.TextureUtil;
import net.minecraft.client.resources.data.AnimationMetadataSection;

public class ItemBitSword extends ItemSword {
	
	private IIcon[] pixels = new IIcon[256];
	private IIcon blank;
	
	public ItemBitSword()
	{
		super(EnumHelper.addToolMaterial("BitSword", 0, Integer.MAX_VALUE, 0, -4, 0));
		setUnlocalizedName("ItemBitSword");
	}
	
	@Override
	public int getRenderPasses(int metadata)
    {
        return metadata;
    }
	
	@Override
    @SideOnly(Side.CLIENT)
    public void registerIcons(IIconRegister register)
    {
        for(int i = 0; i < 256; i++)
        {
        	pixels[i] = register.registerIcon(BitCraftingMod.MODID + ":pixels/pixel_" + i);
        }
        blank = register.registerIcon(BitCraftingMod.MODID + ":pixels/blank");
    }
    
	@Override
    @SideOnly(Side.CLIENT)
    public int getColorFromItemStack(ItemStack stack, int pass)
    {
		if(!stack.hasTagCompound())
			return 0;
        NBTTagCompound itemData = stack.getTagCompound();
        int[] colors = itemData.getIntArray("ColorArray");
        return colors[itemData.getIntArray("Indices")[pass]];
    }
	
	private static void addNoise(int[] colorIn)
	{
		Random rand = new Random();
		int[] colorOut = colorIn;
		for(int i = 0; i < colorIn.length; i++)
		{
			if(colorIn[i] != -1)
			{
				int r = (colorIn[i] >> 16) & 255;
				int g = (colorIn[i] >> 8) & 255;
				int b = colorIn[i] & 255;
				int alter = rand.nextInt(15) - 7;
				r = (Math.max(Math.min(r + alter, 255), 0));
				g = (Math.max(Math.min(g + alter, 255), 0));
				b = (Math.max(Math.min(b + alter, 255), 0));
				colorOut[i] = (r << 16) + (g << 8) + b;
			}
		}
		colorIn = colorOut;
	}

	@Override
	public IIcon getIcon(ItemStack stack, int pass)
    {
		if(!stack.hasTagCompound())
			return blank;
        NBTTagCompound itemData = stack.getTagCompound();
        return getIconFromDamageForRenderPass(stack.getItemDamage(), itemData.getIntArray("Indices")[pass]);
    }
	
	@Override
	public IIcon getIconFromDamageForRenderPass(int damage, int index) {
		return pixels[index];
	}

	@Override
	@SideOnly(Side.CLIENT)
	public boolean requiresMultipleRenderPasses()
	{
		return true;
	}
	
	@Override
	@SideOnly(Side.CLIENT)
    public boolean hasEffect(ItemStack stack, int pass)
    {
        return pass == stack.getItemDamage() - 1 && (stack.isItemEnchanted() || (stack.hasTagCompound() && stack.getTagCompound().hasKey("EffectArray")));
    }
	
    /**
     * Called only at the moment the weapon is forged.
     * Sets the weapon's name and Bit array, as well as the name used for accessing the ResourceLocation of the weapon's texture.
     * 
     * @param stack The ItemStack of the BitSword that is being created.
     * @param array The array of ItemBits that make up the weapon (used for color data).
     * @param effectPowers 
     * @param effectChances 
     * @param effects 
     * @param name The name of the weapon as determined by the player.
     * @return The ItemStack, but with NBT data attached.
     */
	public static ItemStack initialize(ItemStack stack, ItemStack[] array, float damage, float durability, float enchantability, ArrayList<String> effects, ArrayList<Float> effectChances, ArrayList<Float> effectPowers)
	{
    	//Initialize all variables.
		NBTTagCompound tagCompound = new NBTTagCompound();
		NBTTagList nbttaglist = new NBTTagList();
		NBTTagList nbteffectlist = new NBTTagList();
		int[] colorArray = new int[256];
		int i = 0;
		int passes = 256;

		stack.setTagCompound(tagCompound);
		
		//Goes through the ItemBit array and turns them into NBT data for the BitSword. Turns nulls into dataless Bits. Takes the color of each Bit and puts it in the color array.
        for(int j = 0, l = 0; j < array.length; j++) 
        {
			if(array[j] == null)
			{
				array[j] = new ItemStack(BitCraftingMod.itemBit);
				passes--;
			}
			if(array[j].getItem() instanceof ItemClearBit)
				passes--;
            NBTTagCompound nbttagcompound = new NBTTagCompound();
            array[j].writeToNBT(nbttagcompound);
            nbttaglist.appendTag(nbttagcompound);
            colorArray[j] = ((ItemBit)BitCraftingMod.itemBit).getColorFromStackBothSides(array[j], 0);
        }
        
        int[] indices = new int[passes];
        for(int j = 0, l = 0; l < passes; j++)
        {
        	if(colorArray[j] != -1)
        		indices[l++] = j;
        }
        addNoise(colorArray);
        
        //Adds each effect to nbteffectlist as an NBT tag with effect name, chance, and power
        if(effects.size() > 0)
        {
        	for(int j = 0; j < effects.size(); ++j)
        	{
	            NBTTagCompound nbttagcompound = new NBTTagCompound();
	            nbttagcompound.setString("effect", effects.get(j));
	            nbttagcompound.setFloat("chance", effectChances.get(j));
	            nbttagcompound.setFloat("power", effectPowers.get(j));
	            nbteffectlist.appendTag(nbttagcompound);
        	}
            tagCompound.setTag("EffectArray", nbteffectlist);
        }
        
        //Sets all NBT data, as well as the ItemStack's display name.
        tagCompound.setTag("BitArray", nbttaglist);
        tagCompound.setIntArray("ColorArray", colorArray);
        tagCompound.setIntArray("Indices", indices);
        tagCompound.setInteger("Passes", passes);
        tagCompound.setFloat("Damage", damage);
        tagCompound.setFloat("Durability", durability);
        tagCompound.setFloat("Enchantability", enchantability);
        tagCompound.setInteger("Uses", 0);
        stack.setItemDamage(passes);
        
	    return stack;
	}
	
	public static ItemStack[] getBits(ItemStack stack)
	{
		if(!stack.hasTagCompound())
			return null;
		NBTTagCompound itemData = stack.getTagCompound();
		NBTTagList nbttaglist = itemData.getTagList("BitArray", 10);
		ArrayList<ItemStack> array = new ArrayList<ItemStack>();
		for (int i = 0, j = 0; i < nbttaglist.tagCount(); ++i)
        {
            NBTTagCompound nbttagcompound = nbttaglist.getCompoundTagAt(i);
			ItemStack tempstack = ItemStack.loadItemStackFromNBT(nbttagcompound);
			if(tempstack.hasTagCompound())
			{
				boolean existsAlready = false;
				for(int l = 0; l < j; l++)
				{
					if(tempstack.isItemEqual(array.get(l)) && ItemBit.bitsAreEqual(tempstack, array.get(l)) && array.get(l).stackSize < array.get(l).getMaxStackSize())
					{
						existsAlready = true;
						array.get(l).stackSize++;
						break;
					}
				}
				if(!existsAlready)
				{
					array.add(tempstack);
					j++;
				}
			}
        }
		return array.toArray(new ItemStack[array.size()]);
	}
	
	@Override
	public boolean hitEntity(ItemStack stack, EntityLivingBase par2, EntityLivingBase par3)
    {
		if(stack.hasTagCompound())
		{
			NBTTagCompound itemData = stack.getTagCompound();
	        itemData.setInteger("Uses", itemData.getInteger("Uses") + 1);
	        if(itemData.getInteger("Uses") >= itemData.getFloat("Durability"))
	        	stack.stackSize--;
		}
        return true;
    }
	
	@Override
	public boolean onBlockDestroyed(ItemStack stack, World p_150894_2_, Block p_150894_3_, int p_150894_4_, int p_150894_5_, int p_150894_6_, EntityLivingBase par7)
    {
        if ((double)p_150894_3_.getBlockHardness(p_150894_2_, p_150894_4_, p_150894_5_, p_150894_6_) != 0.0D && stack.hasTagCompound())
        {
        	NBTTagCompound itemData = stack.getTagCompound();
	        itemData.setInteger("Uses", itemData.getInteger("Uses") + 1);
	        if(itemData.getInteger("Uses") >= itemData.getFloat("Durability"))
	        	stack.stackSize--;
        }
        return true;
    }
	
	@Override
	public int getMaxDamage(ItemStack stack)
    {
		if(!stack.hasTagCompound())
	        return super.getDisplayDamage(stack);
		NBTTagCompound itemData = stack.getTagCompound();
        return (int)itemData.getFloat("Durability");
    }
	
	@Override
	public int getDisplayDamage(ItemStack stack)
    {
		if(!stack.hasTagCompound())
	        return super.getDisplayDamage(stack);
		NBTTagCompound itemData = stack.getTagCompound();
        return itemData.getInteger("Uses");
    }
	
	@Override
	public boolean isDamaged(ItemStack stack)
    {
		if(!stack.hasTagCompound())
	        return false;
		NBTTagCompound itemData = stack.getTagCompound();
        return itemData.getInteger("Uses") > 0;
    }
	
	@Override
    @SideOnly(Side.CLIENT)
    public void addInformation(ItemStack stack, EntityPlayer player, 
          List tooltip, boolean isAdvanced) 
    {
        if(stack.hasTagCompound())
        {
    		NBTTagCompound itemData = stack.getTagCompound();
        	tooltip.add("Durability: " + String.format("%.0f", itemData.getFloat("Durability")));
        	tooltip.add("Enchantability: " + String.format("%.0f", itemData.getFloat("Enchantability")));
        	if (itemData.hasKey("EffectArray")) {
        		NBTTagList effectlist = itemData.getTagList("EffectArray", 10);
        		for(int i = 0; i < effectlist.tagCount(); ++i)
        		{
        			NBTTagCompound effectData = effectlist.getCompoundTagAt(i);
					String text = (String) (effectData.getString("effect").equals("fire")
							? EnumChatFormatting.RED + "Enflame" + EnumChatFormatting.RESET
							: effectData.getString("effect").equals("earth")
									? EnumChatFormatting.DARK_GRAY + "Stonestrike" + EnumChatFormatting.RESET
									: effectData.getString("effect").equals("lightning")
											? EnumChatFormatting.YELLOW + "Stormcall" + EnumChatFormatting.RESET
											: effectData.getString("effect").equals("ice")
													? EnumChatFormatting.AQUA + "Frostbite" + EnumChatFormatting.RESET
													: EnumChatFormatting.DARK_PURPLE + "" + EnumChatFormatting.OBFUSCATED
															+ "Anomolize" + EnumChatFormatting.RESET);
					tooltip.add(text + " (" + String.format("%.3f", itemData.getFloat("chance")*100) + "%, " + String.format("%.3f", itemData.getFloat("power")) + ")");
        		}
			}
        }
    }
	
    @Override
    public Multimap getAttributeModifiers(ItemStack stack)
    {
        Multimap multimap = HashMultimap.create();
        double damage = 0;
        if(stack.hasTagCompound())
        {
        	NBTTagCompound itemData = stack.getTagCompound();
        	damage = itemData.getFloat("Damage");
        	multimap.put(SharedMonsterAttributes.attackDamage.getAttributeUnlocalizedName(), new AttributeModifier(field_111210_e, "Weapon modifier", (double)damage, 0));
        }
        return multimap;
    }
    
    @Override
    public int getItemEnchantability(ItemStack stack)
    {
    	if(stack.hasTagCompound())
        {
        	NBTTagCompound itemData = stack.getTagCompound();
        	return (int)itemData.getFloat("Enchantability");
        } else {
        	return super.getItemEnchantability();
        }
    }
    
    
    
    /*
	public static ResourceLocation getResourceLocation(ItemStack stack)
	{
		if(!stack.hasTagCompound())
			return new ResourceLocation("bcm", "textures/items/itemBit.png");
        NBTTagCompound itemData = stack.getTagCompound();
        return new ResourceLocation(itemData.getString("Location"));
	}
	@Override
	public IIcon getIcon(ItemStack stack, int pass)
    {
		IIcon i = itemIcon;
		if(!stack.hasTagCompound())
			return i;
		
        NBTTagCompound itemData = stack.getTagCompound();
	    BufferedImage icon = new BufferedImage(16, 16, BufferedImage.TYPE_INT_ARGB);
	    int[] colorArray = itemData.getIntArray("ColorArray");
	    
	    for (int j = 0; j < colorArray.length; j++) {
	        if(colorArray[j] != -1)
	        	icon.setRGB(j % 16, j / 16, colorArray[j]);
	    }
	    
		return Minecraft.getMinecraft().getTextureMapBlocks().getAtlasSprite(getResourceLocation(stack).toString());
    }*/
}
